<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.demo.dao.AccountDao" >
  <resultMap id="BaseResultMap" type="com.demo.entity.Account" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="money_num" property="moneyNum" jdbcType="DOUBLE" />
    <result column="pay_type" property="payType" jdbcType="VARCHAR" />
    <result column="inout_type" property="inoutType" jdbcType="VARCHAR" />
    <result column="note_date" property="noteDate" jdbcType="TIMESTAMP" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, money_num, pay_type, inout_type, note_date, remark
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.demo.entity.AccountExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account_table
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="page != null" >
      limit #{page.begin} , #{page.pageSize}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from account_table
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from account_table
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.demo.entity.AccountExample" >
    delete from account_table
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.demo.entity.Account" >
    insert into account_table (id, money_num, pay_type, 
      inout_type, note_date, remark
      )
    values (#{id,jdbcType=INTEGER}, #{moneyNum,jdbcType=DOUBLE}, #{payType,jdbcType=VARCHAR}, 
      #{inoutType,jdbcType=VARCHAR}, #{noteDate,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.demo.entity.Account" >
    insert into account_table
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="moneyNum != null" >
        money_num,
      </if>
      <if test="payType != null" >
        pay_type,
      </if>
      <if test="inoutType != null" >
        inout_type,
      </if>
      <if test="noteDate != null" >
        note_date,
      </if>
      <if test="remark != null" >
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="moneyNum != null" >
        #{moneyNum,jdbcType=DOUBLE},
      </if>
      <if test="payType != null" >
        #{payType,jdbcType=VARCHAR},
      </if>
      <if test="inoutType != null" >
        #{inoutType,jdbcType=VARCHAR},
      </if>
      <if test="noteDate != null" >
        #{noteDate,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.demo.entity.AccountExample" resultType="java.lang.Integer" >
    select count(*) from account_table
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update account_table
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.moneyNum != null" >
        money_num = #{record.moneyNum,jdbcType=DOUBLE},
      </if>
      <if test="record.payType != null" >
        pay_type = #{record.payType,jdbcType=VARCHAR},
      </if>
      <if test="record.inoutType != null" >
        inout_type = #{record.inoutType,jdbcType=VARCHAR},
      </if>
      <if test="record.noteDate != null" >
        note_date = #{record.noteDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update account_table
    set id = #{record.id,jdbcType=INTEGER},
      money_num = #{record.moneyNum,jdbcType=DOUBLE},
      pay_type = #{record.payType,jdbcType=VARCHAR},
      inout_type = #{record.inoutType,jdbcType=VARCHAR},
      note_date = #{record.noteDate,jdbcType=TIMESTAMP},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.demo.entity.Account" >
    update account_table
    <set >
      <if test="moneyNum != null" >
        money_num = #{moneyNum,jdbcType=DOUBLE},
      </if>
      <if test="payType != null" >
        pay_type = #{payType,jdbcType=VARCHAR},
      </if>
      <if test="inoutType != null" >
        inout_type = #{inoutType,jdbcType=VARCHAR},
      </if>
      <if test="noteDate != null" >
        note_date = #{noteDate,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.demo.entity.Account" >
    update account_table
    set money_num = #{moneyNum,jdbcType=DOUBLE},
      pay_type = #{payType,jdbcType=VARCHAR},
      inout_type = #{inoutType,jdbcType=VARCHAR},
      note_date = #{noteDate,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>